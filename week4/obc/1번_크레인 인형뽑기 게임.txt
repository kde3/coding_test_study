# 크레인 인형뽑기 게임 
def solution(board, moves):

    # 바구니 역할을 하는 스택
    basket = []
    # 터뜨려진 인형의 개수를 저장할 변수
    popped_count = 0

    # moves 리스트의 각 이동에 대해 실행
    for move in moves:
        column = move - 1  # 1-indexed를 0-indexed로 변환 (배열 숫자 맞추기 위해서)

        # 해당 열에서 가장 위에 있는 인형을 찾기
        for row in range(len(board)):
            if board[row][column] != 0:  # 빈 칸이 아니라면
                doll = board[row][column]  # 인형을 집어들고
                board[row][column] = 0  # 해당 위치를 빈 칸으로 만듦

                # 바구니의 마지막 인형과 같은지 확인
                if basket and basket[-1] == doll: # 바구니가 텅비지 않았고 최상단의 인형과 지금 옮기는 인형이 같은지 확인
                    basket.pop()  # 바구니에서 제거
                    popped_count += 2  # 두 인형이 터짐
                else:
                    basket.append(doll)  # 바구니에 추가

                break  # 한 번 집었으면 더 이상 탐색하지 않음

    return popped_count

# 예제
# board: 2차원 배열 게임 상태
board = [
    [0, 0, 0, 0, 0],
    [0, 0, 1, 0, 3],
    [0, 2, 5, 0, 1],
    [4, 2, 4, 4, 2],
    [3, 5, 1, 3, 1]
]

# 인형을 집기 위한 크레인의 이동 경로 리스트
moves = [1, 5, 3, 5, 1, 2, 1, 4]

solution(board, moves) # 출력: 4