from collections import deque

def solution(n, m, graph) :
    result = [0] * (n+1)
    nodes = [0] * (n+1)

    result[n] = 1

    for g in graph:
        for node, _ in g :
            nodes[node] += 1

    queue = deque([n])
    while queue :
        q = queue.popleft()

        if not graph[q] :
            continue

        w, result[q] = result[q], 0

        for node, cost in graph[q]:
            nodes[node] -= 1
            if nodes[node] == 0 :
                queue.append(node)

            result[node] += cost * w

    return result

n = int(input())
m = int(input())
graph = [[] for _ in range(n+1)]
for _ in range(m) :
    x, y, k = map(int, input().split())
    graph[x].append((y, k))

result = solution(n, m, graph)

for k, v in enumerate(result) :
    if k != 0 and v != 0 :
        print(k, v)
