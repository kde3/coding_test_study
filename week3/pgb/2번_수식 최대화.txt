from itertools import permutations

def solution(expression):
    
    def calc(a,b,op):
        if op == '+':
            return str(int(a)+int(b))
        elif op == '-':
            return str(int(a)-int(b))
        elif op == '*':
            return str(int(a)*int(b))
        else:
            return a+op+b
    
    op_ranks = list(permutations(["+","-","*"]))
    
    #수식 분할
    for oper in ['+','-','*']:
        expression = expression.replace(oper, ' '+oper+' ')
    
    ex_sp_o = expression.split()
    
    answer = 0
    for order in op_ranks:
        ex_sp = ex_sp_o.copy()
        for i in range(3):
            j = 0
            while j < len(ex_sp):
                if(ex_sp[j] == order[i]):
                    r = calc(ex_sp[j-1],ex_sp[j+1],ex_sp[j])
                    ex_sp.pop(j-1)
                    ex_sp.pop(j-1)
                    ex_sp.pop(j-1)
                    ex_sp.insert(j-1,r)
                    j -= 1
                j += 1
        answer = max(abs(int(ex_sp[0])),answer)
    
    return answer

기본 원리는
1) 연산 기호와 숫자를 다른 원소로 분리시킨다
2) 연산 기호의 우선순위 순열을 모두 열거한다
3) 1)에서 분리해둔 상태로 2)의 우선순위를 적용한다

우선순위 적용시 유의사항
숫자 - 기호 - 숫자로 list 내 3개의 원소를 가지고 하나의 값을 만들기 때문에,
pop을 3번 하고 그 자리에 연산한 값으로 대체해줘야 함.