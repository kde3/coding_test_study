# 수식 최대화 permutations 사용 (순서가 다르면 다른 결과로 취급)
import re
from itertools import permutations

def solution(expression):
    # 3. 연산자와 숫자를 분리
    def parse_expression(expression):
        numbers = list(map(int, re.split(r'[^0-9]', expression)))  # 숫자만 추출
        operators = re.findall(r'[+\-*]', expression)  # 연산자만 추출
        return numbers, operators

    # 6. 계산 함수
    def calculate(op1, op2, operator):
        if operator == '+':
            return op1 + op2
        elif operator == '-':
            return op1 - op2
        elif operator == '*':
            return op1 * op2

    # 5. 특정 우선순위로 수식 계산
    def evaluate_expression(numbers, operators, precedence):
        numbers = numbers[:]  # 원본 리스트 복사
        operators = operators[:]

        # 우선순위에 따라 연산
        for op in precedence:
            while op in operators:
                idx = operators.index(op)  # 현재 연산자의 첫 번째 인덱스
                result = calculate(numbers[idx], numbers[idx + 1], op)

                # 결과를 반영
                numbers[idx] = result
                del numbers[idx + 1]  # 다음 숫자를 삭제
                del operators[idx]  # 사용한 연산자를 삭제

        return abs(numbers[0])  # 최종 결과의 절대값 반환


    # 1. 가능한 연산자 경우의 수 모두 생성 [('+', '-', '*'), ('+', '*', '-'), ('-', '+', '*'),....]
    precedence_list = permutations(['+', '-', '*'])

    # 2. expression의 숫자와 연산자를 분리
    numbers, operators = parse_expression(expression)

    # 4. 모든 우선순위 조합에 대해 최대값 찾기
    max_result = 0
    for precedence in precedence_list:
        # precedence_list 이 6번 돌아가면서 가장 큰수를 max로 반환  
        max_result = max(max_result, evaluate_expression(numbers, operators, precedence))

    return max_result

# 예제 입력
expression = "100-200*300-500+20"

# 함수 실행
output = solution(expression)
print(output)

#---------------------------------------------------------------------------------------------------

# 수식 최대화 1
import re

def solution(expression):
    # 1. 연산자와 숫자를 분리
    def parse_expression(expression):
        # numbers = list(map(int, re.split(r'[^0-9]', expression)))  
        numbers = list(map(int, re.findall(r'\d+', expression)))# 숫자만 추출
        operators = re.findall(r'[+\-*]', expression)  # 연산자만 추출
        return numbers, operators

    # 2. 계산 함수
    def calculate(op1, op2, operator):
        if operator == '+':
            return op1 + op2
        elif operator == '-':
            return op1 - op2
        elif operator == '*':
            return op1 * op2

    # 3. 특정 우선순위로 수식 계산
    def evaluate_expression(numbers, operators, precedence):
        numbers = numbers[:]  # 원본 리스트 복사
        operators = operators[:]

        # 우선순위에 따라 연산
        for op in precedence:
            while op in operators:
                idx = operators.index(op)  # 현재 연산자의 첫 번째 인덱스
                result = calculate(numbers[idx], numbers[idx + 1], op)

                # 결과를 반영
                numbers[idx] = result
                del numbers[idx + 1]  # 다음 숫자를 삭제
                del operators[idx]  # 사용한 연산자를 삭제

        return abs(numbers[0])  # 최종 결과의 절대값 반환

    # 4. 가능한 연산자 우선순위 생성 (순열 직접 구현!!!!)
    def generate_permutations(elements):
        if len(elements) == 1:
            return [elements]

        permutations = []
        for i in range(len(elements)):
            rest = elements[:i] + elements[i+1:]
            for perm in generate_permutations(rest):
                permutations.append([elements[i]] + perm)

        return permutations


    precedence_list = generate_permutations(['+', '-', '*'])

    # 5. 연산자와 숫자 분리
    numbers, operators = parse_expression(expression)

    # 6. 모든 우선순위 조합에 대해 최대값 찾기
    max_result = 0
    for precedence in precedence_list:
        max_result = max(max_result, evaluate_expression(numbers, operators, precedence))

    return max_result

# 예제
expression = "100-200*300-500+20"

solution(expression)

