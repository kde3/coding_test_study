from collections import deque
INF = int(1e9)

def bfs(n, graph) :
    distance = [INF] * (n+1)
    distance[1] = 0
    queue = deque([1])
    
    while queue :
        q = queue.popleft()
        
        for g in graph[q] :
            newDist = distance[q] + 1
            if newDist < distance[g] :
                distance[g] = newDist
                queue.append(g)
        
    return distance

    # 1. 가장 거리 작은 것 꺼내서 방문
    # 2. 연결된 노드들 중 거리가 더 작아지면 거리 업뎃
    

def solution(n, edge):
    graph = [[] for _ in range(n+1)]
    for a, b in edge :
        graph[a].append(b)
        graph[b].append(a)
        
    # print(graph)
    
    distance = bfs(n, graph)
    # print(distance)
    maxVal = 0
    answer = 0
    for i in range(1, n+1) :
        if maxVal < distance[i] :
            answer = 1
            maxVal = distance[i]
        elif maxVal == distance[i] :
            answer += 1
    
    return answer